# -*- coding: utf-8 -*-
"""EVA_Utils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10WBfOzz1_ZuleuZih9nWgkEtMwCX22AV
"""

# Commented out IPython magic to ensure Python compatibility.
import torch 
import torch.nn as nn
import torchvision
from torchsummary import summary
import torch.nn.functional as F
import torch.optim as optim
# %matplotlib inline
import matplotlib.pyplot as plt



'''
#data Statistics
train = train_dataset.train_data
train = train_dataset.transform(train.numpy())


print("Train data statistics : ")

print('#    Numpy shape :' ,train.numpy().shape)
print('#    Tensor shape :', train_dataset.train_data.size())
print('#    Max :', torch.max(train))
print('#    min :', torch.min(train))
print('#    std:', torch.std(train))
print('#    var:', torch.var(train))
print('#    Mean:', torch.mean(train))
'''

def incorrect_images(model, device, test_loader):
  incorrect_examples = []  ## store incorrect images
  incorrect_target = []
  incorrect_pred =[]

  model.eval()
  test_loss=0
  correct=0
  with torch.no_grad():
    for data, target in test_loader:
      data, target = data.to(device), target.to(device)
      output = model(data)
      #test_loss += F.nll_loss(output, target, reduction='sum').item()
      pred = output.data.max(1, keepdim=True)[1]
      correct += pred.eq(target.data.view_as(pred)).sum().item()
      
      idxs_mask = (pred.eq(target.data.view_as(pred))==False).nonzero() ## store incorrect images

      for id in idxs_mask:
        incorrect_examples.append(data[id[0].item()])
        incorrect_target.append(target[id[0].item()].item())
        incorrect_pred.append(pred[id[0].item()].item())

  incorrect={'images':incorrect_examples,
             'Pred':incorrect_pred,
             'target':incorrect_target}

  return incorrect


  # test_loss /= len(test_loader.dataset)
  # test_losses.append(test_loss)

  # print('\nTest set: loss: {:.6f}, Accuracy: {}/{} ({:.3f}%)\n'.format(
  #   test_loss, correct, len(test_loader.dataset),
  #   100. * correct / len(test_loader.dataset)))

  # test_acc.append(100. * correct / len(test_loader.dataset))




  # fig = plt.figure()

  # for i in range(25):
  #   plt.subplot(5,5,i+1)
  #   plt.tight_layout(pad=0, w_pad=0, h_pad=0.4)
  #   plt.imshow(incorrect_examples[i].cpu().numpy().squeeze(), cmap='gray', interpolation='none')
  #     plt.title(f"Predicted:{incorrect_pred[i]} \n Target:{incorrect_target[i]}",color='red',fontsize=6)
  #   plt.axis('off')
    
 
  # plt.savefig('/content/drive/My Drive/models/incorrect_images.jpg', dpi=300, bbox_inches='tight')
  # plt.show()