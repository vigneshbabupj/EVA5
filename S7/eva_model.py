# -*- coding: utf-8 -*-
"""EVA_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AkH8W7hQMBQIM77XbwwXtot4hRXR2f2t
"""

import torch 
import torch.nn as nn
import torchvision
from torchsummary import summary
import torch.nn.functional as F

## Define Ghost Batch Normalization
class BatchNorm(nn.BatchNorm2d):
    def __init__(self, num_features, eps=1e-05, momentum=0.1, weight=True, bias=True):
        super().__init__(num_features, eps=eps, momentum=momentum)
        self.weight.data.fill_(1.0)
        self.bias.data.fill_(0.0)
        self.weight.requires_grad = weight
        self.bias.requires_grad = bias


class GhostBatchNorm(BatchNorm):
    def __init__(self, num_features, num_splits, **kw):
        super().__init__(num_features, **kw)
        self.num_splits = num_splits
        self.register_buffer('running_mean', torch.zeros(num_features * self.num_splits))
        self.register_buffer('running_var', torch.ones(num_features * self.num_splits))

    def train(self, mode=True):
        if (self.training is True) and (mode is False):  # lazily collate stats when we are going to use them
            self.running_mean = torch.mean(self.running_mean.view(self.num_splits, self.num_features), dim=0).repeat(
                self.num_splits)
            self.running_var = torch.mean(self.running_var.view(self.num_splits, self.num_features), dim=0).repeat(
                self.num_splits)
        return super().train(mode)

    def forward(self, input):
        N, C, H, W = input.shape
        if self.training or not self.track_running_stats:
            return F.batch_norm(
                input.view(-1, C * self.num_splits, H, W), self.running_mean, self.running_var,
                self.weight.repeat(self.num_splits), self.bias.repeat(self.num_splits),
                True, self.momentum, self.eps).view(N, C, H, W)
        else:
            return F.batch_norm(
                input, self.running_mean[:self.num_features], self.running_var[:self.num_features],
                self.weight, self.bias, False, self.momentum, self.eps)

## Model Architecture
class Assgn_6_BN_model(nn.Module):
  def __init__(self):
      super(Assgn_6_BN_model, self).__init__()

      #Input Block 1
      self.Conv1 = nn.Sequential(
          nn.Conv2d(in_channels=1, out_channels=10, kernel_size=(3, 3), padding=0, bias=False),
          nn.ReLU()          
      ) # ouput - 26

      self.BatchN1 = nn.BatchNorm2d(10)

      # Convolution Block 1
      self.Conv2 = nn.Sequential(
          nn.Conv2d(in_channels=10, out_channels=16, kernel_size=(3, 3), padding=0, bias=False),
          nn.ReLU()
      ) # ouput - 24

      self.BatchN2 = nn.BatchNorm2d(16)

      # Transistion Block 1
      self.pool1 = nn.MaxPool2d(kernel_size=(2,2),stride=2)
      self.Conv3 = nn.Sequential(
          nn.Conv2d(in_channels=16, out_channels=10, kernel_size=(1, 1), padding=0, bias=False),
          nn.ReLU()
      ) # ouput - 12

      self.BatchN3 = nn.BatchNorm2d(10)

      # Convolution Block 2

      self.Conv4 = nn.Sequential(
          nn.Conv2d(in_channels=10, out_channels=16, kernel_size=(3, 3), padding=0, bias=False),
          nn.ReLU()
      ) # ouput - 10

      self.BatchN4 = nn.BatchNorm2d(16)

      # Convolution Block 3

      self.Conv5 = nn.Sequential(
          nn.Conv2d(in_channels=16, out_channels=16, kernel_size=(3, 3), padding=0, bias=False),
          nn.ReLU()
          
      ) # ouput - 8

      self.BatchN5 = nn.BatchNorm2d(16)


      # Convolution Block 4

      self.Conv6 = nn.Sequential(
          nn.Conv2d(in_channels=16, out_channels=16, kernel_size=(3, 3), padding=0, bias=False),
          nn.ReLU()
      ) # ouput - 6

      self.BatchN6 = nn.BatchNorm2d(16)

      # Convolution Block 5

      self.GAP = nn.Sequential(
          nn.AvgPool2d(kernel_size=6)
      ) # ouput - 1

      # Convolution Block 6

      self.Conv7 = nn.Sequential(
          nn.Conv2d(in_channels=16, out_channels=10, kernel_size=(1, 1), padding=0, bias=False)
        )

  
  def forward(self,x):
        x = self.Conv1(x)
        x = self.BatchN1(x)
        x = self.Conv2(x)
        x = self.BatchN2(x)
        x = self.pool1(x)
        x = self.Conv3(x)
        x = self.BatchN3(x)
        x = self.Conv4(x)
        x = self.BatchN4(x)
        x = self.Conv5(x)
        x = self.BatchN5(x)
        x = self.Conv6(x)
        x = self.BatchN6(x)
        x = self.GAP(x)
        x = self.Conv7(x) 
  
        x = x.view(-1, 10)
        return F.log_softmax(x, dim=-1)

## Model Architecture
class Assgn_6_GBN_model(nn.Module):
  def __init__(self):
      super(Assgn_6_GBN_model, self).__init__()

      #Input Block 1
      self.Conv1 = nn.Sequential(
          nn.Conv2d(in_channels=1, out_channels=10, kernel_size=(3, 3), padding=0, bias=False),
          nn.ReLU()          
      ) # ouput - 26


      self.GBN1 = GhostBatchNorm(10,2)

      # Convolution Block 1
      self.Conv2 = nn.Sequential(
          nn.Conv2d(in_channels=10, out_channels=16, kernel_size=(3, 3), padding=0, bias=False),
          nn.ReLU()
      ) # ouput - 24

      self.GBN2 = GhostBatchNorm(16,2)

      # Transistion Block 1
      self.pool1 = nn.MaxPool2d(kernel_size=(2,2),stride=2)
      self.Conv3 = nn.Sequential(
          nn.Conv2d(in_channels=16, out_channels=10, kernel_size=(1, 1), padding=0, bias=False),
          nn.ReLU()
      ) # ouput - 12

      self.GBN3 = GhostBatchNorm(10,2)


      # Convolution Block 2

      self.Conv4 = nn.Sequential(
          nn.Conv2d(in_channels=10, out_channels=16, kernel_size=(3, 3), padding=0, bias=False),
          nn.ReLU()
      ) # ouput - 10

      self.GBN4 = GhostBatchNorm(16,2)

      # Convolution Block 3

      self.Conv5 = nn.Sequential(
          nn.Conv2d(in_channels=16, out_channels=16, kernel_size=(3, 3), padding=0, bias=False),
          nn.ReLU()
          
      ) # ouput - 8

      self.GBN5 = GhostBatchNorm(16,2)

      # Convolution Block 4

      self.Conv6 = nn.Sequential(
          nn.Conv2d(in_channels=16, out_channels=16, kernel_size=(3, 3), padding=0, bias=False),
          nn.ReLU()
      ) # ouput - 6

      self.GBN6 = GhostBatchNorm(16,2)

      # Convolution Block 5

      self.GAP = nn.Sequential(
          nn.AvgPool2d(kernel_size=6)
      ) # ouput - 1

      # Convolution Block 6

      self.Conv7 = nn.Sequential(
          nn.Conv2d(in_channels=16, out_channels=10, kernel_size=(1, 1), padding=0, bias=False)
        )

  
  def forward(self,x, Batch_Norm):
        x = self.Conv1(x)
        x = self.GBN1(x)
        x = self.Conv2(x)
        x = self.GBN2(x)
        x = self.pool1(x)
        x = self.Conv3(x)
        x = self.GBN3(x)
        x = self.Conv4(x)
        x = self.GBN4(x)
        x = self.Conv5(x)
        x = self.GBN5(x)
        x = self.Conv6(x)
        x = self.GBN6(x)
        x = self.GAP(x)
        x = self.Conv7(x)
  
        x = x.view(-1, 10)
        return F.log_softmax(x, dim=-1)

class Assign_7_Cifar10_model(nn.Module):
    def __init__(self):
        super(Assign_7_Cifar10_model, self).__init__()


        # Convolution Block 1
        self.Conv1 = nn.Sequential(
            nn.Conv2d(in_channels=3, out_channels=32, kernel_size=(3, 3), padding=1, bias=False),nn.ReLU(),nn.BatchNorm2d(32),
            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=(3, 3), padding=1, bias=False),nn.ReLU(),nn.BatchNorm2d(64)  
        ) 


        # Transistion Block 1
        self.Tran1 = nn.Sequential(
            nn.MaxPool2d(kernel_size=(2,2),stride=2),
            nn.Conv2d(in_channels=64, out_channels=32, kernel_size=(1, 1), padding=1, bias=False),nn.ReLU(),nn.BatchNorm2d(32)
        ) 

        # Convolution Block 2

        self.depthwiseConv2 = nn.Sequential(
            nn.Conv2d(in_channels=32, out_channels=32, kernel_size=(3, 3), padding=1,groups=32, bias=False),nn.ReLU(),nn.BatchNorm2d(32),
            nn.Conv2d(in_channels=32, out_channels=64, kernel_size=(1, 1), padding=1, bias=False),nn.ReLU(),nn.BatchNorm2d(64)
        ) 

        self.Conv3 = nn.Sequential(
            nn.Conv2d(in_channels=64, out_channels=64, kernel_size=(3, 3), padding=1, bias=False),nn.ReLU(),nn.BatchNorm2d(64),
            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=(3, 3), padding=0, bias=False),nn.ReLU(),nn.BatchNorm2d(128)
        )
        self.dialted =nn.Sequential(
             nn.Conv2d(in_channels=64, out_channels=128, kernel_size=(3, 3), padding=1, bias=False,dilation  = 2),nn.ReLU(),nn.BatchNorm2d(128)
        )

        # Transistion Block 2
        self.Tran2 = nn.Sequential(
            nn.MaxPool2d(kernel_size=(2,2),stride=2),
            nn.Conv2d(in_channels=128, out_channels=64, kernel_size=(1, 1), padding=1, bias=False),nn.ReLU(),nn.BatchNorm2d(64)
        ) 

        # Convolution Block 3
        self.Conv4 = nn.Sequential(
            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=(3, 3), padding=1, bias=False),nn.ReLU(),nn.BatchNorm2d(128),
            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=(3, 3), padding=1, bias=False),nn.ReLU(),nn.BatchNorm2d(256)  
        ) 

        # Transistion Block 3
        self.Tran3 = nn.Sequential(
            nn.MaxPool2d(kernel_size=(2,2),stride=2),
            nn.Conv2d(in_channels=256, out_channels=64, kernel_size=(1, 1), padding=1, bias=False),nn.ReLU(),nn.BatchNorm2d(64)
        ) 

        # Convolution Block 4
        self.Conv5 = nn.Sequential(
            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=(3, 3), padding=1, bias=False),nn.ReLU(),nn.BatchNorm2d(128),
            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=(3, 3), padding=1, bias=False),nn.ReLU(),nn.BatchNorm2d(256)  
        )


        # GAP Block 

        self.GAP = nn.Sequential(
            nn.AvgPool2d(kernel_size=7)
        )
            
        self.Conv6 = nn.Sequential(
          nn.Conv2d(in_channels=256, out_channels=10, kernel_size=(1, 1), padding=0, bias=False)
        )


       
    def forward(self,x):
          x = self.Conv1(x)

          x = self.Tran1(x)

          x = self.depthwiseConv2(x)

          #print(x.shape)

          x2 = self.Conv3(x)

          #print('Conv',x2.shape)

          x = self.dialted(x)
          #print('Dial',x.shape)
          

          x+=x2#torch.cat((x, x2),3)

          x = self.Tran2(x)

          x = self.Conv4(x)

          x = self.Tran3(x)

          x = self.Conv5(x)

          x = self.GAP(x)

          x = self.Conv6(x) 
          #print(x.shape)
          x = x.view(-1, 10)
          #print(x.shape)
          return F.log_softmax(x, dim=1)


# net = Net().to(device)