# -*- coding: utf-8 -*-
"""EVA_A11_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AgXtzqCUzt7gEVcnsk7jsXurpGxiNiCT
"""

import torch 
import torch.nn as nn
import torchvision
from torchsummary import summary
import torch.nn.functional as F

class Assign_11_model(nn.Module):
    def __init__(self):
        super(Assign_11_model, self).__init__()


        # Prep layer
        self.Prep = nn.Sequential(
            nn.Conv2d(in_channels=3, out_channels=64, kernel_size=(3, 3), stride=1, padding=1, bias=False),
            nn.BatchNorm2d(64),
            nn.ReLU()
        )

        # Layer 1
        self.Conv1 = nn.Sequential(
            nn.Conv2d(in_channels=64, out_channels=128, kernel_size=(3, 3), stride=1, padding=1, bias=False),
            nn.MaxPool2d(kernel_size=(2,2),stride=2),
            nn.BatchNorm2d(128),
            nn.ReLU()
        )
        
        self.Resblock1 = nn.Sequential(
            nn.Conv2d(in_channels=128, out_channels=128, kernel_size=(3, 3), stride=1, padding=1, bias=False),
            nn.BatchNorm2d(128),
            nn.ReLU(),
            nn.Conv2d(in_channels=128, out_channels=128, kernel_size=(3, 3), stride=1, padding=1, bias=False),
            nn.BatchNorm2d(128),
            nn.ReLU(),

        )

        # Layer 2
        self.Conv2 = nn.Sequential(
            nn.Conv2d(in_channels=128, out_channels=256, kernel_size=(3, 3), stride=1, padding=1, bias=False),
            nn.MaxPool2d(kernel_size=(2,2),stride=2),
            nn.BatchNorm2d(256),
            nn.ReLU()
        )

        # Layer 3
        self.Conv3 = nn.Sequential(
            nn.Conv2d(in_channels=256, out_channels=512, kernel_size=(3, 3), stride=1, padding=1, bias=False),
            nn.MaxPool2d(kernel_size=(2,2),stride=2),
            nn.BatchNorm2d(512),
            nn.ReLU()
        )
        
        self.Resblock2 = nn.Sequential(
            nn.Conv2d(in_channels=512, out_channels=512, kernel_size=(3, 3), stride=1, padding=1, bias=False),
            nn.BatchNorm2d(512),
            nn.ReLU(),
            nn.Conv2d(in_channels=512, out_channels=512, kernel_size=(3, 3), stride=1, padding=1, bias=False),
            nn.BatchNorm2d(512),
            nn.ReLU(),

        )
        
    
        # Max Pool
        self.Pool = nn.MaxPool2d(kernel_size=(4,4))


        # FC
        self.FC = nn.Linear(512,10)


    def forward(self,x):

          x = self.Prep(x)
          x = self.Conv1(x)
          r1 = self.Resblock1(x)
          x = x + r1
          x = self.Conv2(x)
          x = self.Conv3(x)
          r2 = self.Resblock2(x)
          x = x + r2
          x = self.Pool(x)

          x = x.view(-1, 512)

          x = self.FC(x)
          
          return F.log_softmax(x, dim=-1)
