# -*- coding: utf-8 -*-
"""GradCam.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zb_oRLJsqKHjB1pIncSxJhQz0vFmw0m-
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import torch
import torch.nn as nn
from torch.nn import functional as F
import torchvision.transforms as transforms
from tqdm import tqdm

import copy

import click
import cv2

# %matplotlib inline
import matplotlib.pyplot as plt

class _BaseWrapper(object):
    def __init__(self, model):
        super(_BaseWrapper, self).__init__()
        self.device = next(model.parameters()).device
        self.model = model
        self.handlers = []  # a set of hook function handlers

    def _encode_one_hot(self, ids):
        one_hot = torch.zeros_like(self.logits).to(self.device)
        one_hot.scatter_(1, ids, 1.0)
        return one_hot

    def forward(self, image):
        self.image_shape = image.shape[2:]
        self.logits = self.model(image)
        self.probs = F.softmax(self.logits, dim=1)
        return self.probs.sort(dim=1, descending=True)  # ordered results

    def backward(self, ids):
        """
        Class-specific backpropagation
        """
        one_hot = self._encode_one_hot(ids)
        self.model.zero_grad()
        self.logits.backward(gradient=one_hot, retain_graph=True)

    def generate(self):
        raise NotImplementedError

    def remove_hook(self):
        """
        Remove all the forward/backward hook functions
        """
        for handle in self.handlers:
            handle.remove()


class BackPropagation(_BaseWrapper):
    def forward(self, image):
        self.image = image.requires_grad_()
        return super(BackPropagation, self).forward(self.image)

    def generate(self):
        gradient = self.image.grad.clone()
        self.image.grad.zero_()
        return gradient



class GradCAM(_BaseWrapper):
    """
    "Grad-CAM: Visual Explanations from Deep Networks via Gradient-based Localization"
    https://arxiv.org/pdf/1610.02391.pdf
    Look at Figure 2 on page 4
    """

    def __init__(self, model, candidate_layers=None):
        super(GradCAM, self).__init__(model)
        self.fmap_pool = {}
        self.grad_pool = {}
        self.candidate_layers = candidate_layers  # list

        def save_fmaps(key):
            def forward_hook(module, input, output):
                self.fmap_pool[key] = output.detach()

            return forward_hook

        def save_grads(key):
            def backward_hook(module, grad_in, grad_out):
                self.grad_pool[key] = grad_out[0].detach()

            return backward_hook

        # If any candidates are not specified, the hook is registered to all the layers.
        for name, module in self.model.named_modules():
            if self.candidate_layers is None or name in self.candidate_layers:
                self.handlers.append(module.register_forward_hook(save_fmaps(name)))
                self.handlers.append(module.register_backward_hook(save_grads(name)))

    def _find(self, pool, target_layer):
        if target_layer in pool.keys():
            return pool[target_layer]
        else:
            raise ValueError("Invalid layer name: {}".format(target_layer))

    def generate(self, target_layer):
        fmaps = self._find(self.fmap_pool, target_layer)
        grads = self._find(self.grad_pool, target_layer)
        weights = F.adaptive_avg_pool2d(grads, 1)

        gcam = torch.mul(fmaps, weights).sum(dim=1, keepdim=True)
        gcam = F.relu(gcam)
        gcam = F.interpolate(
            gcam, self.image_shape, mode="bilinear", align_corners=False
        )

        B, C, H, W = gcam.shape
        gcam = gcam.view(B, -1)
        gcam -= gcam.min(dim=1, keepdim=True)[0]
        gcam /= gcam.max(dim=1, keepdim=True)[0]
        gcam = gcam.view(B, C, H, W)

        return gcam

def show_cam_on_image(img, mask):

    heatmap = np.uint8(255 * mask)
    heatmap_img = cv2.applyColorMap(heatmap, cv2.COLORMAP_JET)

    #print(img.size)
    #print(heatmap_img.size)
    superimposed_img = cv2.addWeighted((img* 255).astype(np.uint8), 0.8, heatmap_img, 0.3, 0)
    # plt.imshow(superimposed_img)
    # plt.show()
    return superimposed_img

def plot_grad_cam(model,classes,train_loader,device,savefig=False,*save_dir):

  """
  Generate Grad-CAM at different layers of model
  """
  # Model
  #model = models.resnet152(pretrained=True)
  model.to(device)
  model.eval()

  # The four residual layers
  target_layers = ["layer1", "layer2", "layer3", "layer4"]


  # Images
  #images, raw_images = load_images(image_paths)
  #images = torch.stack(images).to(device)

  # get some random training images
  dataiter = iter(train_loader)
  images, labels = dataiter.next()
  images = images.to(device)
  labels = labels.to(device)



  inv_normalize = transforms.Normalize(
    mean=[-0.4890062/0.264582, -0.47970363/0.258996, -0.47680542/0.25643882],
    std=[1/0.264582, 1/0.258996, 1/0.25643882]
  )


  raw_images =[inv_normalize(im) for im in images]




  sample_images = images[:5]
  sample_raw_img = raw_images[:5]
  sample_target_class = labels[:5]
  # gcam = GradCAM(model=model)
  # probs, ids = gcam.forward(images)
  # ids_ = torch.LongTensor([[target_class]] * len(images)).to(device)
  # gcam.backward(ids=ids_)

  disp_img = []
  fig,ax = plt.subplots(nrows = 5, ncols = 5,figsize=(15,10))

  gcam = GradCAM(model=model)

  probs, ids = gcam.forward(sample_images)
  #ids_ = torch.LongTensor([[sample_target_class]] * len(sample_images)).to(device)
  ids_ = sample_target_class.view(len(sample_images), -1).to(device)
  gcam.backward(ids=ids_)



  gcam_regions = []
    
  for target_layer in target_layers:
    #print("Generating Grad-CAM @{}".format(target_layer))
    # Grad-CAM
    regions = gcam.generate(target_layer=target_layer)

    gcam_regions.append(regions)


  for id in range(len(sample_images)):

    raw_img = np.transpose(raw_images[id].cpu().numpy(), (1, 2, 0)).squeeze()
    ax[id,0].imshow(raw_img)
    ax[id,0].set_title(f" Predicted:{classes[ids[id][0]]} \n Target:{classes[sample_target_class[id]]}",color='red')
    ax[id,0].axis('off')

    disp_img.append(raw_img)

    for idx in range(len(target_layers)):
      cam_img = show_cam_on_image(raw_img,gcam_regions[idx][id,0].cpu().numpy())
      ax[id,idx+1].imshow(cam_img,interpolation='bilinear')
      ax[id,idx+1].set_title(f"{target_layers[idx]}",color='red')
      ax[id,idx+1].axis('off')
      disp_img.append(cam_img)


  plt.tight_layout(pad=0, w_pad=0, h_pad=0.4)
  #plt.subplots_adjust(wspace=0, hspace=0.2, left=0, bottom=0, top=1)

  if savefig:
    plt.savefig(save_dir+'grad_cam_image.jpg', dpi=300, bbox_inches='tight')
  plt.show()